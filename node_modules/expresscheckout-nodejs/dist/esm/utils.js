export function encodeFormData(data) {
    if (data == undefined)
        return '';
    return Object.keys(data)
        .map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(data[key]); })
        .join('&');
}
export function base64Encode(str) {
    return Buffer.from(str).toString('base64');
}
// export function flatten(data?: RequestEntity): RequestEntity {
//   if(data == undefined) return {}
//   const result: RequestEntity = {}
//   function dfs(curr: RequestEntity, prop: string) {
//     if (typeof curr != 'object') {
//       result[prop] = curr
//     } else if (Array.isArray(curr)) {
//         result[prop] = JSON.stringify(curr)
//     } else {
//       var isEmpty = true;
//       for (var p in curr) {
//         isEmpty = false
//         dfs(curr[p], prop ? prop + "." + p : p)
//       }
//       if (isEmpty && prop)
//         result[prop] = {}
//     }
//   }
//   dfs(data, '')
//   return result
// }
export function prepareData(body) {
    if (body == undefined)
        return '';
    return encodeFormData(body);
}
export function prepareQueryParams(query) {
    if (query == undefined)
        return '';
    // const flat = flatten(query)
    return "?".concat(encodeFormData(query));
}
export function isDevEnvironment() {
    return process.env.NODE_ENV === 'development' ||
        process.env.NODE_ENV === 'dev' ||
        process.env.NODE_ENV === 'local' ||
        process.env.NODE_ENV === undefined;
}
export function deepCopyArray(arr) {
    var copy = [];
    arr.forEach(function (elem) {
        if (Array.isArray(elem)) {
            copy.push(deepCopyArray(elem));
        }
        else {
            if (typeof elem === 'object') {
                copy.push(deepCopyObject(elem));
            }
            else {
                copy.push(elem);
            }
        }
    });
    return copy;
}
export function deepCopyObject(obj) {
    var tempObj = {};
    for (var _i = 0, _a = Object.entries(obj); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], value = _b[1];
        if (Array.isArray(value)) {
            tempObj[key] = deepCopyArray(value);
        }
        else {
            if (typeof value === 'object') {
                tempObj[key] = deepCopyObject(value);
            }
            else {
                tempObj[key] = value;
            }
        }
    }
    return tempObj;
}
export function deepCopy(data) {
    if (typeof data == 'object' && data != undefined)
        return deepCopyObject(data);
    else if (Array.isArray(data))
        return deepCopyArray(data);
    return data;
}
//# sourceMappingURL=utils.js.map