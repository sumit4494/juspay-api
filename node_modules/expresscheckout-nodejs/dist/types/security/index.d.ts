/// <reference types="node" />
import { JWTKeys } from './JWT.js';
export type { JWTKeys };
declare const _default: {
    JWS: {
        sign: (claims: string, keyId: string, privateKey: import("crypto").KeyObject) => import("./JWS.js").JWSSigned;
        verify: (signed: string | import("./JWS.js").JWSSigned, publicKey: import("crypto").KeyObject) => string;
    };
    Keys: {
        readPublicKey: (keyString?: string | undefined) => import("crypto").KeyObject;
        readPrivateKey: (keyString?: string | undefined) => import("crypto").KeyObject;
    };
    JWE: {
        encrypt: (data: string, keyId: string, publicKey: import("crypto").KeyObject) => import("./JWE.js").JWEToken;
        decrypt: (cipher: string | import("./JWE.js").JWEToken, privateKey: import("crypto").KeyObject) => string;
    };
    JWT: {
        jwtEncrypt: (data: string, keyId: string, publicKey: import("crypto").KeyObject, privateKey: import("crypto").KeyObject) => import("./JWE.js").JWEToken;
        jwtDecrypt: (data: string | import("./JWE.js").JWEToken, keyId: string, publicKey: import("crypto").KeyObject, privateKey: import("crypto").KeyObject) => string;
    };
};
export default _default;
